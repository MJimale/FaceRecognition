{"version":3,"sources":["components/FaceRecognition/FaceRecognition.js","components/ImageLinkForm/ImageLinkForm.js","App.js","registerServiceWorker.js","index.js"],"names":["FaceRecognition","_ref","imageUrl","box","react_default","a","createElement","className","id","alt","src","width","height","style","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","ImageLinkForm","onInputChange","onButtonSubmit","gap","type","onChange","onClick","app","Clarifai","App","apiKey","particlesOption","particles","number","value","density","enable","value_area","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFaceBox","setState","event","input","target","state","marginTop","models","predict","FACE_DETECT_MODEL","then","response","catch","err","console","log","particles_default","params","components_ImageLinkForm_ImageLinkForm","components_FaceRecognition_FaceRecognition","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","src_App_0","URL","process","origin","addEventListener","concat","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.66903894.chunk.js","sourcesContent":["import React from 'react';\r\nimport './FaceRecognition.css'\r\n\r\nconst FaceRecognition= ({ imageUrl, box }) => {\r\n\treturn(\r\n\t\t<div className='center ma'>\r\n\t\t\t<div className='absolute mt2'>\r\n\t\t\t\t<img id=\"inputimage\" alt='' src={imageUrl} width='500px' height='auto' />\r\n\t\t\t\t<div className='bounding-box' style={{top:box.topRow, right:box.rightCol, bottom:box.bottomRow, left:box.leftCol}}></div>\r\n\t\t\t</div>\t\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default FaceRecognition;","import React from 'react';\r\nimport './ImageLinkForm.css'\r\n\r\nconst ImageLinkForm = ({ onInputChange, onButtonSubmit, gap }) => {\r\n\treturn(\r\n\t\t<div style={gap}>\r\n\t\t\t<p className= 'f3'>\r\n\t\t\t\t{'Enter URL of your image and I will detect faces in your pictures. Give it a try'}\r\n\t\t\t</p>\r\n\t\t\t<div className='center'>\r\n\t\t\t\t<div className='form pa4 center br3 shadow-5 '>\r\n\t\t\t\t\t<input className='f4 pa2 w-70 center' type='text' onChange={onInputChange} />\r\n\t\t\t\t\t<button className='w-30 grow f4 link ph3 pv2 dib white' type='text' onClick={onButtonSubmit}>Detect</button>\r\n\t\t\t\t</div>\t\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\n\r\n\r\n\r\n\r\nexport default ImageLinkForm;","import React, { Component } from 'react';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Particles from 'react-particles-js';\nimport Clarifai from 'clarifai';\n\nimport './App.css';\n\n\nconst app = new Clarifai.App({\n apiKey: 'd459a3dd44594bdeb0be0f8bd7af363c'\n});\n\nconst particlesOption = {\n  particles: {\n    number: {\n      value: 130,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input:'',\n      imageUrl:' ',\n      box:{},\n      gap:{\"marginTop\": \"15%\"}\n    };\n  }\n\n  calculateFaceLocation = (data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height)\n    }\n  }\n\n  displayFaceBox = (box) => {\n    this.setState({box: box});\n  }\n\n  onInputChange = (event) => {\n    this.setState({input: event.target.value});\n  }\n\n  onButtonSubmit = () => {\n    this.setState({imageUrl: this.state.input, gap:{\"marginTop\": \"2%\"}});\n    app.models\n    .predict(\n      Clarifai.FACE_DETECT_MODEL,\n      this.state.input\n      )\n    .then(response => this.displayFaceBox(this.calculateFaceLocation(response)))\n    .catch(err => console.log(err))\n  }\n\n \n  render() {\n    return (\n      <div className=\"App\">\n         <Particles className='particles'\n          params={particlesOption}\n        />\n         <div>\n              <ImageLinkForm\n                onInputChange={this.onInputChange}\n                onButtonSubmit={this.onButtonSubmit}\n                gap={this.state.gap}\n              />\n              <FaceRecognition box={this.state.box} imageUrl={this.state.imageUrl} />\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}